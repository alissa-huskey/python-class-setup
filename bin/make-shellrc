#!/bin/bash
#
# make-shellrc -- generate startup file for your shell
#

set -Eeo pipefail # fail on errors, even within pipes
rootdir=$(cd "${0%/*}/.." && pwd -P)

source ${rootdir}/bin/utils.sh

# succeeds if in verbose mode
is_never_ask() {
  [ -n "${never_ask}" ]
}

# succeeds if in verbose mode
is_always_ask() {
  [ -n "${always_ask}" ]
}

# print help
usage() {
  local doc
  define doc <<-EOF

  make-shellrc -- generate shell startup file

  OPTIONS

  -r, --rc [FILE]       Where to write the file
  -s, --shell [SHELL]   Shell to generate the file for (bash, zsh)
  -l, --list            List available rc files to include
  -i, --interactive     Ask about all files to include. (default is to only prompt if optional)
  -a, --auto            Exclude all optional files and do not prompt.
  -v, --verbose         Verbose mode
  -q, --quiet           Quiet mode   
  -n, --dry-run         Do not make changes, just preview them
  -h, --help            Show this help information
EOF

  printf "\n%s\n\n" "$doc"
}

# replace mktemp command if missing
mktemp() {
  # if has mktemp; then
  #   command mktemp ${1:+"$@"}
  #   return
  # fi

  local tmpdir tmp_path var is_dir


  for var in TMPDIR TEMP TMP; do
    eval 'tmpdir=$'"$var"
    if [ -n "${tmpdir}" ] && [ -d "${tmpdir}" ]; then
      # done -- just need to assign tmpdir
      break
    fi
  done

  tmp_path="${tmpdir}mk-shellrc-${timestamp}"
  echo "${tmp_path}"
  is_dry_run && return

  # shellcheck disable=SC2076
  if [[ "-d" =~ "${*}" ]]; then
    mkdir "${tmp_path}"
  else
    touch "${tmp_path}"
  fi
}

# succeeds if in verbose mode
is_list() {
  [ -n "${list_mode}" ]
}

# backup $shellrc to $backup_file
backup() {
  is_dry_run && return

  [ -f "$shellrc" ] || return

  cp "${shellrc}" "${backup_file}"
}

# parse args
args() {
  local sn=1

  while [ $# -gt 0 ]; do case $1 in
      -r|--rc)           sn=2 shellrc="$2"            ;;
      -s|--shell)        sn=2 shell="$2"              ;;
      -l|--list)              list_mode=true          ;;
      -i|--interactive)       always_ask=true         ;;
      -a|--auto)              never_ask=true          ;;
      -n|--dry-run)           dry_run_mode=true       ;;
      -q|--quiet)             quiet_mode=true         ;;
      -v|--verbose)           verbose_mode=true       ;;
      -h|--help)              usage ; exit            ;;
      *) : ;;
    esac
    shift $sn
    sn=1
  done
}

# figure out what shell the current terminal uses, unless $shell is already defined
find_shell() {
  [ -n "$shell" ] && return

  if [ -n "${shellrc}" ]; then
    shell="${shellrc##*/}"
    shell="${shell#.}"
    shell="${shell%rc}"
  else
    shell=${SHELL##*/}
  fi

  [ -z "${shell}" ] && abort "Unable to determine shell. Please specify with --shell or --rc."

  if ! [[ "${shell}" =~ ^(bash|zsh)$ ]]; then
    abort "Unsupported shell: '${shell}'. (If this seems like a mistake, specify with --shell.)"
  fi
}

# find the rc file for the users shell unless $shellrc is already defined
find_shellrc() {
  [ -n "$shellrc" ] && return

  case "${shell}" in
    zsh)   shellrc="$HOME/.zshrc"          ;;
    bash)  shellrc="$HOME/.bash_profile"   ;;
    *)     shellrc="$HOME/.profile"        ;;
  esac
}

# get a list of rc files to add
rcs_to_add() {
  local rc_file pat scripts script add_file
  local -a optional_files

  if ! is_never_ask; then
    optional_files=( "${rootdir}/rcs/optional"/*."${shell}" "${rootdir}/rcs/optional"/*.sh )
  fi

  is_dry_run || touch "${shellrc}"

  scripts=( \
    '/# mksh: check if present/ s/^[[:space:]]*(.*)#.*$/\1/p' \
    '/^# mksh: check for / s///p' \
  )

  # iterate through the list of all files
  for rc_file in "${rootdir}/rcs"/*.sh "${optional_files[@]}"; do

    add_file=true

    # get content from this file based on "# mksh:" comments
    # exclude this file if that content is already in the users shellrc
    for script in "${scripts[@]}"; do
      if read -r pat < <(sed -nEe "${script}" "${rc_file}"); then
        if grep -q "${pat}" "${shellrc}"; then
          add_file=false
        fi
      fi
    done

    if [[ "${add_file}" == "true" ]]; then

      # add to files array
      files+=( "${rc_file}" )
    fi

  done
}

# succeeds if the filepath has "optional" in it
is_optional() {
  [[ "${1}" =~ optional ]]
}

# print the name and description of one file
file_info() {
  local file="${1}" length="${2:-10}" newline="\n" symbol="-" name desc

  if is_optional "${file}"; then
    symbol="*"
  fi

  name="${file##*/}"
  name="${name##*_}" # strip preceeding N_ from the name (for odering)

  desc="$(grep -B1 '^# -*$' "${file}" | sed -Ee '$d ; s/# //; s/^.* -- //')"

  printf "%s %-*s : %-*s" "${symbol}" $length "${name}" 45 "${desc}"

  if ! [[ "${*}" =~ "-n" ]]; then
    echo
  fi
}

# interactively as which files should be included
# for all files if is_always_ask, otherwise just the optional ones
# append files to chosen array
interactive() {
  local maxlen=0 file name nl=""

  # get the max length of the filename
  for file in "${files[@]}"; do
    name="${file##*/}"
    if [[ ${#name} -gt $maxlen ]]; then
      maxlen=${#name}
    fi
  done

  for file in "${files[@]}"; do
    if is_always_ask || is_optional "${file}" ; then
      nl="-n"
    else
      nl=""
    fi

    if is_never_ask && is_optional "${file}"; then
      continue
    fi

    if ! is_quiet || is_optional "${file}"; then
      file_info "$file" $maxlen $nl
    fi

    if is_always_ask || is_optional "${file}"; then
      prompt " Add?" || continue
      chosen+=( "${file}" )
    fi
  done

  preview | ${PAGER:-less}
}

auto() {
  for file in "${files[@]}"; do
    chosen+=( "${file}" )
  done
}

# print list of required and optional files
file_list() {
  local file

  for file in "${files[@]}"; do
    file_info "$file"
  done
}

# print list of required and optional files
list() {
  printf "\n\033[1mRC Files\033[0m\n\n"

  file_list | column -t -s':'

  printf "\n\n( - recommended,  * optional )\n\n"
}

# generate a shellrc file
generate() {
  local file

  for file in "${shellrc}" "${@}"; do
    sed -Ee '/# mksh: check if present/ s/// ; /^# mksh: check for /d' "${file}"
  done
}

# prompt the user with a question
prompt() {
  local question="${1:-Continue?}"
  printf "%s [yN] " "${question}"
  read -r ok

  [[ "${ok}" =~ ^[yY]$ ]]
}

# preview the generated shellrc contents
preview() {

  printf "\n\n\033[32m=======================================================================\033[0m\n"
  printf "\033[1m%s Preview\033[0m\n" "${shellrc##*/}"
  printf "\033[32m-----------------------------------------------------------------------\033[0m\n\n"

  generate "${chosen[@]}"

  printf "\033[32m=======================================================================\033[0m\n\n"
}

# backup the $shellrc file then write the generated contents to $shellrc
save() {
  is_dry_run && return

  if ! is_never_ask; then
    prompt "Save to ${shellrc}? " || return
  fi

  local tmpfile="${TEMPDIR:-.}/dot-shellrc"

    backup
    generate "${chosen[@]}" > "${tmpfile}"
    mv "${tmpfile}" "${shellrc}"
}

main() {
  local shellrc shell backup_file timestamp
  local -a files chosen

  args ${1:+"$@"}
  find_shell
  find_shellrc

  timestamp=$(date +%Y.%m.%d.%H.%M.%S)
  backup_file="${shellrc/\/.//}-${timestamp}"

  show_var shell shellrc backup_file

  # prompt || return

  rcs_to_add

  if is_list; then
    list
    return
  fi

  if is_never_ask; then
    auto
  else
    interactive
  fi

  save
}

main ${1:+"$@"}
