#!/bin/bash
#
# setup-mac -- mac setup script
#

set -Eeo pipefail # fail on errors, even within pipes
rootdir=$(cd "${0%/*}/.." && pwd -P)

source "${rootdir}/bin/utils.sh"

# parse args
args() {
  local sn=1

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --reset)                reset_progress          ;;
      -n|--dry-run)           dry_run_mode=true       ;;
      -v|--verbose)           verbose_mode=true       ;;
      -h|--help)              usage ; exit            ;;
    esac
    shift $sn
    sn=1
  done
}

# initialize the state file
init() {
  local state_dir=${state_file%/*}

  show_var state_file state_dir

  run mkdir -p "${state_dir}"
  run touch "${state_file}"
}

# save progress
save() {
  if is_dry_run; then
    cmd echo $1 > "${state_file}"
    return
  fi

  echo $1 >> ${state_file}
}

# success if all packages in brewfile are installed
is_brewfile_installed() {
  local file="$1"
  brew bundle check --no-upgrade --file "${file}" > /dev/null 2>&1

}

# installs packages from a brewfile
brewfile_install() {
  local file="$1"

  brew bundle install --no-lock --no-upgrade --file ${file}
}

# create shell startup file
pre_1() {
  printf "    The make-shrc script will generate/append to your ~/.zshrc\n"
  printf "    or ~/.bash_profile file. To run the script:\n\n"
}

# create shell startup file
post_1() {
  printf "    Run manually from another terminal window for more\n"
  printf "    options and control.\n\n"
  printf "    For help try ./bin/make-shrc --help\n"
}

# create shell startup file
is_done_1() {
  false
}

# create shell startup file
do_1() {
  run ${rootdir}/bin/make-shellrc --auto
}

# install xcode
pre_2() {
  printf "    \033[31mImportant: This will take a long time\033[0m\n\n"

  printf "    This could take several hours, so you might want to run\n"
  printf "    it overnight. For laptops, make sure the power cable is\n"
  printf "    plugged in and the lid is open.\n\n\n"
}

# install xcode
is_done_2() {
  local p

  has xcode-select || abort "Missing command: xcode-select"

  has xcrun || return 1
  has xcodebuild || return 1
  xcodebuild -checkFirstLaunchStatus 2> /dev/null || return 1

  p=$(xcode-select -p)
}

# install xcode
do_2() {
  run xcode-select --install \
    && run xcodebuild -runFirstLaunch
}


# install homebrew
is_done_3() {
  has brew
}

# install homebrew
do_3() {
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
}

# install python prerequisites
is_done_4() {
  is_brewfile_installed "${rootdir}/dependencies/brew-python.rb"
}

# install python prerequisites
do_4() {
  brewfile_install ${rootdir}/dependencies/brew-python.rb
}

# install python
is_done_5() {
  has asdf \
    && asdf plugin list | grep -qx python \
    && asdf list python | grep -qw 3.8.11
}

# install python
do_5() {
  has asdf || brew install asdf
  asdf plugin list | grep -qx python || asdf plugin add python
  asdf install python 3.8.11
  asdf python global 3.8.11
}

# install poetry
is_done_6() {
  has poetry
}

# install poetry
do_6() {
  curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
}

# install extra packages
is_done_7() {
  is_brewfile_installed "${rootdir}/dependencies/brewfile.rb"
}

# install extra packages
do_7() {
  brewfile_install ${rootdir}/dependencies/brewfile.rb
}

# success if the step is marked
is_marked_done() {
  local step_no="$1"

  grep -qx "$step_no" "${state_file}"
}

# success if the steps is_done_* func succeeds
is_tested_done() {
  local step_no="$1"

  has "is_done_$step_no" || return 1
  eval "is_done_$step_no"
}

# success if the step is complete
is_done() {
  is_marked_done $1 || is_tested_done $1
}

# install vscode extensions
is_done_8() {
  code --list-extensions 2> /dev/null | grep -qx alissahuskey.vscode-python-class
}

# install vscode extensions
do_8() {
  code --install-extension alissahuskey.vscode-python-class
}

# print the list of steps
checklist() {
  local desc mark step_no=1

  header "Mac Setup"

  while read -r desc; do
    [[ -z "$desc" ]] && continue

    if ! is_marked_done ${step_no} && is_tested_done ${step_no}; then
      mark="${tested_done}"
    else
      is_done $step_no && mark="${marked_done}" || mark="$marked_todo"
    fi

    printf "%d. %s  %s\n" $step_no $mark "$desc"

    if [[ -z "$on_step" ]] && ! is_done $step; then
      on_step=$step_no
    fi

    step_no=$((step_no + 1))
  done < ${steps_file}

  printf "\n\n"
}

# clear all marked progress
reset_progress() {
  echo > "${state_file}"
}

# mark a step as done
check() {
  local i
  for i in "$@"; do
    save $i
  done
}

# mark a step as not done
uncheck() {
  local i
  for i in "$@"; do
    echo "unchecking: $i"
    sed -i'.bak' -e "/^${i}$/d" "${state_file}"
    rm "${state_file}.bak"
  done
}

# success if this is a valid step number
valid_step() {
  local step_no="$1" total_steps
  total_steps=$(sed -e '/^\s*$/d' "${steps_file}" | wc -l)

  if [[ $step_no =~ ^[0-9]+$ ]] && \
     [[ $step_no -ge 1 ]] && \
     [[ $step_no -le ${total_steps} ]]; then
    return
  fi

  error "Not a valid step number: '${step_no}'"
  pause
  return 1
}

# show the code in a step
show_step() {
  local step_no="$1" func pre_func post_func response
  func="do_${step_no}" pre_func="pre_${step_no}" post_func="post_${step_no}"

  if ! valid_step ${step_no}; then
    return
  fi

  has "$func" || abort "Don't know how to do step: ${step_no}"

  printf "\n\n\033[1mStep %d: " $step_no
  sed -ne "${step_no} p" ${steps_file}
  printf "\033[0m\n\n"


  has "$pre_func" && "$pre_func"

  declare -f $func | sed -Ee '1,2d ; $d ; s/run //g ; s/;$// ; s/\$\{rootdir}/./g ; s/^([ ]*).* [|]{2} /\1/'
  printf "\n\n"

  has "$post_func" && "$post_func"
  pause
}

# run the code in a step
do_step() {
  local step_no="$1" func
  func="do_${step_no}"

  if ! valid_step ${step_no}; then
    return
  fi

  eval "$func" || abort "Failed to do step ${step_no}."

  if is_done ${step_no}; then
    pause
    return
  fi

  printf "\n\nYou have completed step %s .\n" ${step_no}
  printf "To ensure you can see your changes, please\n"
  printf "start a new terminal window and close this one.\n\n"

  save ${step_no}

  exit
}

# show the menu of commands
menu() {
  local reply step_no

  printf "commands: (x)check, (u)ncheck, (r)eset, (s)how, (d)o, (?)help, (q)uit\n"
  printf "\033[36m#>\033[0m "
  read -r reply step_no

  case "${reply}" in
      '')                                   ;;
      x|check)      check $step_no          ;;
      u|uncheck)    uncheck $step_no        ;;
      s|show)       show_step $step_no      ;;
      d|do)         do_step $step_no        ;;
      r|reset)      reset_progress          ;;
      c|commands)   commands                ;;
      '?'|h|help)   show_help               ;;
      q|quit)       exit                    ;;
      *)            help "$step_no"         ;;
  esac
}

# print help info
show_help() {
  local doc

  clear

  header "Mac Setup Help"

  define doc <<END
  This program is to help you set up your mac for Python Class.

  \033[7;47;34mStep List\033[0m

  You'll see a list of steps that can be in one of the following states:

      ${marked_todo} to do -- not done
      ${tested_done}  appears done -- according to system tests
      ${marked_done} done -- marked as done

  Check off the gray steps to speed things up by skipping system tests.

  \033[7;47;34mTyping Commands\033[0m

  After the list you'll see a prompt. This is where you'll type commands.

      \033[36m#>\033[0m

  At the prompt, type a command followed by a step number if applicable.

  For example:

      \033[36m#>\033[0m show 3

  Most commans have an abbreviation. For example the short alias for the
  'show' command is 's', so you could also type:

      \033[36m#>\033[0m s 3

  For a list of commands type:

      \033[36m#>\033[0m commands

  \033[7;47;34mDoing Steps\033[0m

  Once you do a step, either through the program or manually at the command
  line, things on your system have usually changed and are not reflected in
  your current terminal session. That's why we encourage starting a new
  terminal and closing the current one after each step.
END

  echo -e "$doc"

  pause
}

# print the list of commands
commands() {
  local -a commands

  define commands <<EOF
x check mark a step as done
u uncheck mark a step as not done
r reset clear your progress
s show show how to complete a step on the command line
d do try to do the step
c commands list of commands
? help print help information
q quit quit the program
EOF

  clear

  header "Commands"

  echo "$commands" | while read -r alias name desc; do
    printf "%*s, %s -- %s\n" 15 "$name" "$alias" "$desc"
  done

  pause
}

main() {
  local state_file steps_file
  local marked_todo tested_done marked_done

  marked_todo="⬜️"
  marked_done="✅"
  tested_done="☑️"

  state_file=~/.local/state/setup-mac
  steps_file=${rootdir}/bin/mac-steps.txt

  args ${1:+"$@"}
  init

  while : ; do

      clear
      checklist
      menu
  done

}

main ${1:+"$@"}
